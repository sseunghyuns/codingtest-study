### Sample Input ###
x = 26

d = [0] * 30001

# Bottom-up 방식 
for i in range(2, x+1):
    ## 여기서 왜 if 1빼기, 2,3,5 나누기를 동등하게 하지 않고 처음에 1을 빼고 시작하는가?
    ## 1을 빼고 시작하는 이유는 다음에 계산할 나누기가 1을 뺀 값보다 작거나 큼에 따라 어차피 교체되기 때문.
    ## 즉 네 가지 방법을 모두 확인하는 방법인 것이다.
    
    
    # 현재의 수에서 1을 빼는 경우
    d[i] = d[i-1]+1 # +1을 해주는 이유는 함수의 호출 횟수를 구해야 하기 때문.
    # 다시 말해, 1을 더하는 것은 d는 결과가 아닌 계산한 횟수를 저장하는 것이기 때문.
    
    # 현재의 수가 2로 나누어 떨어지는 경우
    if i % 2 == 0:
        d[i] = min(d[i], d[i//2]+1)
    # 현재의 수가 3으로 나누어 떨어지는 경우
    if i % 3 == 0:
        d[i] = min(d[i], d[i//3]+1)
    # 현재의 수가 5로 나누어 떨어지는 경우
    if i % 5 == 0:
        d[i] = min(d[i], d[i//5]+1) # d[i]에는 1을 더하지 않는 이유는 이미 1을 뺄 때 1을 더해준 이력이 있기 때문이다.
    
print(d[x])